name: Release Go Executable

# Controls when the workflow will run
on:
  push:
    tags:
      - 'v*' # Triggers the workflow on version tags like v1.0, v1.2.3

jobs:
  build-and-release:
    name: Build and Release Windows Executable
    runs-on: ubuntu-latest # We'll use Ubuntu to cross-compile for Windows

    permissions:
      contents: write # Needed to create releases and upload release assets

    steps:
      # Step 1: Check out your repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21' # Specify the Go version your project uses

      # Step 3: Define names for binaries based on the tag
      - name: Set up environment variables for names
        id: set_names
        run: |
          # The binary name without extension or version
          BINARY_BASE_NAME="go-reconnectwifi"
          # GITHUB_REF_NAME will be the tag (e.g., v1.0.0)
          VERSIONED_BINARY_NAME="${BINARY_BASE_NAME}_${GITHUB_REF_NAME}"
          echo "EXE_NAME=${VERSIONED_BINARY_NAME}.exe" >> $GITHUB_OUTPUT
          # Your main Go source file (the one with package main)
          echo "SOURCE_FILE=main.go" >> $GITHUB_OUTPUT

      # Step 4: Build the Go executable for Windows
      - name: Build Go executable for Windows (amd64)
        env:
          GOOS: windows
          GOARCH: amd64
          CGO_ENABLED: 0 # Disable CGO for easier cross-compilation if not needed
        run: |
          echo "Building ${{ steps.set_names.outputs.SOURCE_FILE }} into ${{ steps.set_names.outputs.EXE_NAME }}"
          go build -o ${{ steps.set_names.outputs.EXE_NAME }} -ldflags="-s -w" ${{ steps.set_names.outputs.SOURCE_FILE }}
          echo "Build complete. Executable size:"
          ls -lh ${{ steps.set_names.outputs.EXE_NAME }}

      # Step 5: Create a GitHub Release and upload the .exe file
      # This uses the GitHub CLI, which is pre-installed on GitHub-hosted runners
      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is automatically provided by GitHub
        run: |
          echo "Creating release for tag ${{ github.ref_name }}"
          gh release create ${{ github.ref_name }} \
            --title "Release ${{ github.ref_name }}" \
            --generate-notes \
            ${{ steps.set_names.outputs.EXE_NAME }} # Attach the .exe file directly as a release asset
          echo "Release created and .exe asset uploaded."